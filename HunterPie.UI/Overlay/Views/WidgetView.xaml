<Window x:Class="HunterPie.UI.Overlay.Views.WidgetView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:HunterPie.UI.Overlay.ViewModels"
        xmlns:enums="clr-namespace:HunterPie.UI.Overlay.Enums"
        xmlns:converters="clr-namespace:HunterPie.UI.Overlay.Presentation.Converters"
        xmlns:local="clr-namespace:HunterPie.UI.Overlay.Views"
        mc:Ignorable="d"
        Height="450" 
        Width="800"
        Top="{Binding ViewModel.Settings.Position.Y, Mode=TwoWay}"
        Left="{Binding ViewModel.Settings.Position.X, Mode=TwoWay}"
        Opacity="{Binding ViewModel.Settings.Opacity.Current, Mode=OneWay}"
        Title="{Binding ViewModel.Title, Mode=OneWay}"
        UseLayoutRounding="False"
        SnapsToDevicePixels="False"
        ShowInTaskbar="False"
        AllowsTransparency="True"
        ResizeMode="NoResize"
        SizeToContent="WidthAndHeight"
        WindowStyle="None"
        d:DataContext="{d:DesignInstance viewModels:WidgetContext}"
        Background="#01000000"
        MouseWheel="OnMouseWheel"
        Loaded="OnLoaded"
        Topmost="True">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:WidgetByViewModelConverter x:Key="WidgetByViewModelConverter"/>
    </Window.Resources>
    <WindowChrome.WindowChrome>
        <WindowChrome GlassFrameThickness="-1"
                      CaptionHeight="0"/>
    </WindowChrome.WindowChrome>
    <Grid>
        <Grid.LayoutTransform>
            <ScaleTransform ScaleX="{Binding ViewModel.Settings.Scale.Current, Mode=OneWay}"
                            ScaleY="{Binding ViewModel.Settings.Scale.Current, Mode=OneWay}"
                            CenterX="0.5"
                            CenterY="0.5"/>
        </Grid.LayoutTransform>
        <!-- Widget holder -->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="30"/>
                <RowDefinition Height="1*"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="1"
                    BorderThickness="1,0,1,1"
                    Background="{DynamicResource Brushes.Overlay.DesignMode.Background}"
                    BorderBrush="{DynamicResource Brushes.Overlay.DesignMode.Border}"
                    CornerRadius="0,0,5,5"/>

            <local:WidgetHeader Grid.Row="0"/>

            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Opacity" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding State.IsDesignModeEnabled, Mode=OneWay}"
                                     Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetProperty="Opacity">
                                        <DoubleAnimation Duration="0:0:0.15"
                                                         To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetProperty="Opacity">
                                        <DoubleAnimation Duration="0:0:0.15"
                                                         To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                        <!-- OnMouseOver -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Type, Mode=OneWay}"
                                           Value="{x:Static enums:WidgetType.Window}"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetProperty="Opacity">
                                        <DoubleAnimation Duration="0:0:0.15"
                                                         To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Storyboard.TargetProperty="Opacity">
                                        <DoubleAnimation Duration="0:0:0.15"
                                                         To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>

        <Grid Margin="10,40,10,10">
            <ContentControl ContentTemplate="{Binding ViewModel, Mode=OneWay, Converter={StaticResource WidgetByViewModelConverter}}"
                            Content="{Binding ViewModel, Mode=OneWay}">
                <ContentControl.Style>
                    <Style TargetType="ContentControl">
                        <Style.Setters>
                            <Setter Property="Visibility"
                                    Value="{Binding ViewModel.Settings.Enabled.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </Style.Setters>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ViewModel.Settings.HideWhenUiOpen.Value, Mode=OneWay}"
                                               Value="True"/>
                                    <Condition Binding="{Binding State.IsGameHudVisible, Mode=OneWay}"
                                               Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Hidden"/>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding OverlaySettings.HideWhenUnfocus.Value, Mode=OneWay}"
                                               Value="True"/>
                                    <Condition Binding="{Binding State.IsGameFocused, Mode=OneWay}"
                                               Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Hidden"/>
                            </MultiDataTrigger>

                            <DataTrigger Binding="{Binding State.IsDesignModeEnabled, Mode=OneWay}"
                                         Value="True">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding OverlaySettings.IsEnabled.Value, Mode=OneWay}"
                                         Value="False">
                                <Setter Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>
        </Grid>
    </Grid>
</Window>
