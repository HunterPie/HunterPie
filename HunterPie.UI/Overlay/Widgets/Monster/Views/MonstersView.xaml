<arch:View x:Class="HunterPie.UI.Overlay.Widgets.Monster.Views.MonstersView"
           xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
           xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
           xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
           xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
           xmlns:local="clr-namespace:HunterPie.UI.Overlay.Widgets.Monster.Views"
           xmlns:arch="clr-namespace:HunterPie.UI.Architecture"
           xmlns:viewModels="clr-namespace:HunterPie.UI.Overlay.Widgets.Monster.ViewModels"
           xmlns:converters="clr-namespace:HunterPie.UI.Architecture.Converters"
           xmlns:enums="clr-namespace:HunterPie.Core.Client.Configuration.Enums;assembly=HunterPie.Core"
           xmlns:overlay="clr-namespace:HunterPie.UI.Overlay.Components"
           xmlns:display="clr-namespace:HunterPie.UI.Controls.Display"
           xmlns:conditionals="clr-namespace:HunterPie.UI.Architecture.Converters.Conditionals"
           xmlns:visibilities="clr-namespace:HunterPie.UI.Architecture.Converters.Visibilities"
           xmlns:presentation="clr-namespace:HunterPie.UI.Overlay.Widgets.Monster.Presentation"
           mc:Ignorable="d"
           d:DataContext="{d:DesignInstance Type=viewModels:MonstersViewModel}"
           x:TypeArguments="viewModels:MonstersViewModel"
           Style="{StaticResource STYLE_MONSTERS_WIDGET}"
           x:Name="MonsterWidget">
    <UserControl.Resources>
        <visibilities:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter"/>
        <converters:ConverterPipeline x:Key="InverseNullableToVisibilityConverter">
            <conditionals:IsNullConverter/>
            <BooleanToVisibilityConverter/>
        </converters:ConverterPipeline>
        <presentation:DynamicMonsterWidthConverter x:Key="DynamicMonsterWidthConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
    </UserControl.Resources>
    <Grid>
        <display:Conditional Condition="{Binding Settings.IsCompactModeEnabled.Value, ElementName=MonsterWidget}"
                             Visibility="{Binding Monster, Mode=OneWay, Converter={StaticResource InverseNullableToVisibilityConverter}}">
            <display:Conditional.Component>
                <DataTemplate DataType="{x:Type viewModels:MonstersViewModel}">
                    <ItemsControl ItemsSource="{Binding Monsters, Mode=OneWay}"
                                  Visibility="{Binding Settings.ShowOnlyTarget.Value, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}, Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                                  DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid HorizontalAlignment="Left"
                                             Columns="{Binding Settings.CompactModeColumnLimit.Current, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewModels:BossMonsterViewModel}">
                                <local:CollapsedBossMonsterView Width="80"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </DataTemplate>
            </display:Conditional.Component>

            <display:Conditional.Otherwise>
                <DataTemplate>
                    <ItemsControl ItemsSource="{Binding Monsters, Mode=OneWay}"
                                  Visibility="{Binding Settings.ShowOnlyTarget.Value, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}, Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                                  DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid HorizontalAlignment="Left" 
                                             DataContext="{Binding ., RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}}">
                                    <UniformGrid.Style>
                                        <Style TargetType="UniformGrid">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Settings.Orientation.Value}"
                                                             Value="{x:Static enums:Orientation.Vertical}">
                                                    <Setter Property="Columns" Value="1"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Settings.Orientation.Value}"
                                                             Value="{x:Static enums:Orientation.Horizontal}">
                                                    <Setter Property="Rows" Value="1"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </UniformGrid.Style>
                                </UniformGrid>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewModels:BossMonsterViewModel}">
                                <local:BossMonsterView MaxWidth="{Binding Settings.MaxWidth.Current, RelativeSource={RelativeSource AncestorType={x:Type local:MonstersView}}}">
                                    <local:BossMonsterView.Width>
                                        <MultiBinding Converter="{StaticResource DynamicMonsterWidthConverter}">
                                            <Binding Path="Settings.DynamicResize.Value" 
                                                     Mode="OneWay" 
                                                     RelativeSource="{RelativeSource AncestorType={x:Type local:MonstersView}}"/>
                                            <Binding Path="Settings.MinWidth.Current" 
                                                     Mode="OneWay" 
                                                     RelativeSource="{RelativeSource AncestorType={x:Type local:MonstersView}}"/>
                                            <Binding Path="Settings.MaxWidth.Current" 
                                                     Mode="OneWay" 
                                                     RelativeSource="{RelativeSource AncestorType={x:Type local:MonstersView}}"/>
                                            <Binding Path="DataContext.VisibleMonsters" 
                                                     Mode="OneWay" 
                                                     RelativeSource="{RelativeSource AncestorType={x:Type local:MonstersView}}"/>
                                        </MultiBinding>
                                    </local:BossMonsterView.Width>
                                </local:BossMonsterView>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </DataTemplate>
            </display:Conditional.Otherwise>
        </display:Conditional>


        <local:BossMonsterView Visibility="{Binding ., Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}"
                               DataContext="{Binding Monster, Mode=OneWay}"
                               Width="{Binding Settings.MaxWidth.Current, ElementName=MonsterWidget}"/>
    </Grid>
</arch:View>
